ci:
  - npm set @bxm:registry http://npm.digital.bauer-media.net.au
  - node --version
  - mkdir -p ./shippable/testresults ./shippable/codecoverage ./shippable/buildoutput
  - cd src
  - rm -rf node_modules
  - rm package-lock.json
  - npm install
  - npm rebuild node-sass --force
  - echo "module.exports={buildNumber:'$BRANCH_NAME'};" > version.js
  - cat version.js
  - npm run test:ci
  - ./node_modules/.bin/babel-istanbul report cobertura --dir  ./../shippable/codecoverage/
  - NODE_ENV=production npm run build
  - cd ..
  - if [ $IS_PULL_REQUEST == false ]; then docker build -f Dockerfile.ecs -t $IMAGE:$BRANCH_NAME .; fi
  - if [ $IS_PULL_REQUEST == false ]; then docker tag $IMAGE:$BRANCH_NAME $IMAGE:latest; fi
  - if [ "$BRANCH" == "master" ] && [ $IS_PULL_REQUEST == false ]; then echo "versionName=$BRANCH_NAME" >> $JOB_STATE/homes-site-img-master.env; fi
  - if [ "$BRANCH" != "master" ]; then echo "versionName=$BRANCH_NAME" >> $JOB_STATE/homes-site-img-branch.env; fi
push:
  - if [ $IS_PULL_REQUEST == false ]; then docker push $IMAGE:$BRANCH_NAME; fi
  - if [ $IS_PULL_REQUEST == false ]; then docker push $IMAGE:latest; fi
  - if [ $IS_PULL_REQUEST == false ]; then docker rmi $IMAGE:$BRANCH_NAME; fi # Clear all docker images after completion
  - if [ $IS_PULL_REQUEST == false ]; then docker rmi $IMAGE:latest; fi # Clear all docker images after completion
