# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference # NodeJS App + Docker + ECR + ECS

# Version 2.1 with ORBS for AWS ECR | ECS and DOCKER - Homes-Site

version: 2.1

# ORBS

orbs:
  aws-ecr: circleci/aws-ecr@6.15.3
  aws-ecs: circleci/aws-ecs@2.1.0


# JOBS

jobs:
  ecr-buildandpush-dockerimage:
    environment:
      ENV_BUILD: TEST
    machine:
      image: ubuntu-1604:202010-01
    working_directory: ~/homes-site
    steps:
      - checkout

# SET CCI_BRANCH to use with ECR/DOCKER
      - run:
          name: Set Env Build - TEST | SIT | PROD
          command: CCI_BRANCH_NAME=$(echo $CIRCLE_BRANCH | sed -e 's/\//-/g'); echo "export CCI_BRANCH=$CCI_BRANCH_NAME" >> $BASH_ENV;

# Print CCI_BRANCH to use with ECR/DOCKER - Verify
      - run:
          name: Get Env Build - TEST | SIT | PROD
          command: echo "CCI_BRANCH_NAME=$CCI_BRANCH" ; echo "ENV_BUILD=$ENV_BUILD";


# AWS ECS Integration: Create a task definition using JSON: path-to/json-file.json
      - run:
          name: Use Task Def - Env Specific
          command: |
                if [ "$ENV_BUILD" = "TEST" ]; then
                    echo "ENV_BUILD=$ENV_BUILD" ; echo "CCI_BRANCH_NAME=$CCI_BRANCH" ;
                fi
      - when:
          condition:
            equal: [ master, $CCI_BRANCH ]
          steps:
            - run: echo "ENV_BUILD=$ENV_BUILD"
            - aws-ecs/update-task-definition-from-json:
                task-definition-json: task-def.json


#      - aws-ecs/update-task-definition-from-json:
#          task-definition-json: task-def-$ENV_BUILD.json

# WORKFLOWS

workflows:
  version: 2
  homes-site-build:
    jobs:
      - ecr-buildandpush-dockerimage:
          filters:
            branches:
              ignore:
                - main
              only:
                - circleci-project-setup
                - master
                - /fix.*/
                - /feature.*/
                - /dependabot.*/

### END ###


# AWS ECR Integration: Build and Push Docker Image to ECR
#      - aws-ecr/build-and-push-image:
#          aws-access-key-id: ECR_AWS_ACCESS_KEY_ID
#          aws-secret-access-key: ECR_AWS_SECRET_ACCESS_KEY
#          account-url: AWS_ECR_ACCOUNT_URL
#          region: AWS_DEFAULT_REGION
#          profile-name: profile
#          repo: cci-repos2
#          dockerfile: Dockerfile
#          no-output-timeout: 20m
#          skip-when-tags-exist: false
#          tag: 'latest,$CCI_BRANCH.$CIRCLE_BUILD_NUM'


# Prepare the VM for NodeJS App Build
#      - run:
#          name: "Install | NVM | NPM | NODE_JS"
#          command: |
#                echo -e "\n\n\n ### UBUNTU | NVM | NPM | NODE_JS "
#                cd src; pwd;
#                echo -e "\n ### Install NVM (Node Version Manager) # Installer for NodeJS + NPM "
#                curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
#                source ~/.profile
#                echo -e "\n ### Install NVM v10.19.0 "
#                nvm install v10.19.0
#                echo -e "\n ### Setting Default NVM v10.19.0 "
#                nvm use v10.19.0;
#                echo -e "\n ### Setting NPM Registry as BXM "
#                npm set @bxm:registry http://npm.digital.bauer-media.net.au
#                echo -e "\n ### Print Version Information "
#                echo -e "\n ### NVM Version  : $(nvm --version)"
#                echo -e "\n ### NPM Version  : $(npm --version)"
#                echo -e "\n ### Node Version : $(node --version)"
#                npm install
#                npm rebuild node-sass --force
#                npm run test:ci
#                NODE_ENV=production npm run build


# AWS ECS Integration: [ Cluster | Service | Task | PullImage-ECR | Deploy-NodeJS-APP ]
#      - aws-ecs/update-service:
#          cluster-name: arn:aws:ecs:ap-southeast-2:014901580825:cluster/cci-app-ecs
#          service-name: cci-service-lb-homes-site
#          family: test-homes-site
#          container-image-name-updates: "container=cci-container4,tag=latest"
#          skip-task-definition-registration: false
#          force-new-deployment: true
#          verify-revision-is-deployed: true
#          verification-timeout: 9m
#          max-poll-attempts: 10
#          poll-interval: 120


#          echo -e "\n ### This is pipeline ID << pipeline.id >> # << pipeline.git.branch >>"
#          echo -e "\n ### This is pipeline ID << pipeline.id >> # << pipeline.git.branch >>"
#          source ~/.profile
#          tag: 'latest,$CIRCLE_BRANCH-$CIRCLE_BUILD_NUM'
#          echo -e "\n\n\n ### CCI_BRANCHNAME: $CCI_BRANCH_NAME"
