# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference

# Version 2.1 with AWS ECR and ECS - Homes-Site # NodeJS App + Docker + ECR + ECS

version: 2.1

# ORBS

orbs:
  aws-ecr: circleci/aws-ecr@6.15.3
  aws-ecs: circleci/aws-ecs@2.0.0

# JOBS

jobs:
  ecr-buildandpush-dockerimage:
    machine:
      image: ubuntu-1604:202010-01
    environment:
      DOCKER_IMAGE_ID: "CIRCLE_PROJECT_REPONAME:CIRCLE_BUILD_NUM"
    working_directory: ~/homes-site
    steps:
# Prepare the VM for Docker BUILD + NodeJS App
      - checkout
      - run: |
          dkr_id = "$CIRCLE_PROJECT_REPONAME" + "$CIRCLE_BUILD_NUM"
          dkr_id = "CIRCLE_BRANCH" + dkr_id
          echo 'export $dkr_id' >> $BASH_ENV
          printenv
      - run: |
          echo "UBUNTU | NVM | NPM | NODE_JS"
          echo "### Switching to src dir (/home/circleci/homes-site/src) ###"
          cd src; pwd;
          echo "### Install NVM (Node Version Manager) # Installer for NodeJS + NPM ###"
          curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
          source ~/.profile
          echo "### Install NVM v10.19.0 ###"
          nvm install v10.19.0
          echo "### Setting Default NVM v10.19.0 ###"
          nvm use v10.19.0;
          echo "### Print Version Information ###"
          echo "Node Version : $(node --version)"
          echo "NPM Version  : $(npm --version)"
          echo "### Setting NPM Registry as BXM ###"
          npm set @bxm:registry http://npm.digital.bauer-media.net.au
          echo "### NPM > Install src/package.json > Node_Rebuild > Node_Test ###"
          npm install
          npm rebuild node-sass --force
          npm run test:ci
          NODE_ENV=production npm run build

# AWS ECR Integration: Build and Push NODE JS APP as Docker Image to ECR
      - aws-ecr/build-and-push-image:
          aws-access-key-id: ECR_AWS_ACCESS_KEY_ID
          aws-secret-access-key: ECR_AWS_SECRET_ACCESS_KEY
          account-url: AWS_ECR_ACCOUNT_URL
          region: AWS_DEFAULT_REGION
          profile-name: profile1
          repo: cci-repos2
          create-repo: true
          dockerfile: Dockerfile
          no-output-timeout: 20m
          skip-when-tags-exist: false
          tag: '$DOCKER_IMAGE_ID,homes-site-Port3001'



# Create the task definition using JSON: path\devops-test-homesitewebapp\task-def.json
  ecs-create-taskdef:
    machine:
      image: ubuntu-1604:202010-01
    working_directory: ~/homes-site
    steps:
      - checkout
      - aws-ecs/update-task-definition-from-json:
          task-definition-json: task-def.json

# WORKFLOWS

workflows:
  version: 2
  homes-site-build:
    jobs:
      - ecr-buildandpush-dockerimage # AWS ECR Integration: Build Docker Images and PUSH to ECR

      - ecs-create-taskdef: # AWS ECS Create TASK on Existing ECS Cluster
          requires:
            - ecr-buildandpush-dockerimage

      - aws-ecs/deploy-service-update: # AWS ECS Integration: [ Cluster | Service | Task | PullImage-ECR ]
          cluster-name: arn:aws:ecs:ap-southeast-2:014901580825:cluster/cci-app-ecs
          service-name: cci-service-lb-homes-site
          family: test-homes-site
          container-image-name-updates: "container=cci-container4,tag=$DOCKER_IMAGE_ID"
          skip-task-definition-registration: false
          force-new-deployment: true
          verify-revision-is-deployed: true
          verification-timeout: 9m
          max-poll-attempts: 10
          poll-interval: 120
          requires:
            - ecs-create-taskdef


### END ###
