# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
# NodeJS App + Docker + ECR + ECS
# Version 2.1 with AWS ECR and ECS - Homes-Site

version: 2.1

# ORBS

orbs:
  aws-ecr: circleci/aws-ecr@6.15.3
  aws-ecs: circleci/aws-ecs@2.1.0

# JOBS

jobs:
  ecr-buildandpush-dockerimage:
    machine:
      image: ubuntu-1604:202010-01
    working_directory: ~/homes-site
    steps:
      - checkout

# Prepare the VM for NodeJS App Build
      - run: |
          echo -e "\n\n ### UBUNTU | NVM | NPM | NODE_JS ###"
          echo -e "\n ### This is pipeline ID << pipeline.id >> # << pipeline.git.branch >>"
          echo -e "\n ### Switching to src dir (/home/circleci/homes-site/src) ###"
          cd src; pwd;
          echo -e "\n ### Install NVM (Node Version Manager) # Installer for NodeJS + NPM ###"
          curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
          source ~/.profile
          echo -e "\n ### Install NVM v10.19.0 ###"
          nvm install v10.19.0
          echo -e "\n ### Setting Default NVM v10.19.0 ###"
          nvm use v10.19.0;
          echo -e "\n ### Print Version Information ###"
          echo -e "\n ### NVM Version  : $(nvm --version)  - Node Version Manager ###"
          echo -e "\n ### NPM Version  : $(npm --version)  - Node Package Manager ###"
          echo -e "\n ### Node Version : $(node --version) - NodeJS Version ###"
          echo -e "\n ### Setting NPM Registry as BXM ###"
          npm set @bxm:registry http://npm.digital.bauer-media.net.au
          echo -e "\n ### NPM > Install src/package.json > Node_Rebuild > Node_Test ###"
          npm install
          npm rebuild node-sass --force
          npm run test:ci
          NODE_ENV=production npm run build

# AWS ECR Integration: Build and Push Docker Image to ECR
      - aws-ecr/build-and-push-image:
          aws-access-key-id: ECR_AWS_ACCESS_KEY_ID
          aws-secret-access-key: ECR_AWS_SECRET_ACCESS_KEY
          account-url: AWS_ECR_ACCOUNT_URL
          region: AWS_DEFAULT_REGION
          profile-name: profile1
          repo: cci-repos2
          create-repo: true
          dockerfile: Dockerfile
          no-output-timeout: 20m
          skip-when-tags-exist: false
          tag: 'latest,$CIRCLE_BRANCH-$CIRCLE_BUILD_NUM'

# AWS ECS Integration: Create a task definition using JSON: path-to/json-file.json
#      - aws-ecs/update-task-definition-from-json:
#          task-definition-json: task-def.json

# AWS ECS Integration: [ Cluster | Service | Task | PullImage-ECR | Deploy-NodeJS-APP ]
#      - aws-ecs/update-service:
#          cluster-name: arn:aws:ecs:ap-southeast-2:014901580825:cluster/cci-app-ecs
#          service-name: cci-service-lb-homes-site
#          family: test-homes-site
#          container-image-name-updates: "container=cci-container4,tag=latest"
#          skip-task-definition-registration: false
#          force-new-deployment: true
#          verify-revision-is-deployed: true
#          verification-timeout: 9m
#          max-poll-attempts: 10
#          poll-interval: 120

# WORKFLOWS

workflows:
  version: 2
  homes-site-build:
    jobs:
      - ecr-buildandpush-dockerimage:
          filters:
            branches:
              only:
                - circleci-project-setup
                - master
                - fix
                - feature
                - dependabot



### END ###
