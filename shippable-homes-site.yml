

68 lines (62 sloc)  2.35 KB

# language setting
build_environment: Ubuntu 16.04
language: node_js
node_js: "10.19.0"

runtime:
  nodePool: custom__x86_64__Ubuntu_16_04

env:
  global:
    - APP_KEY=homes-site
    - APP_STUBBED=true
    - IMAGE=317367993082.dkr.ecr.ap-southeast-2.amazonaws.com/homes-site
    - BRANCH_NAME="$(sed 's/\//-/g' <<< $BRANCH).$BUILD_NUMBER" # need to replace '/' in the branch name with '-'
    - BRANCH="$(echo $BRANCH)" # expose branch name globaly

build:
  cache: true
  cache_dir_list:
    - $SHIPPABLE_BUILD_DIR/src/node_modules
  ci:
    (works!) - npm set @bxm:registry http://npm.digital.bauer-media.net.au (works!)
    (works!) - node --version  (works!)
    (Not Required) - mkdir -p ./shippable/testresults ./shippable/codecoverage ./shippable/buildoutput
    (works!) - cd src (works!)
    - rm -rf node_modules
    - rm package-lock.json
    (works!) - npm install (works!)
    (works!) - npm rebuild node-sass --force (works!)
    - echo "module.exports={buildNumber:'$BRANCH_NAME'};" > version.js
    - cat version.js
    (works!) - npm run test:ci (works!)
    - ./node_modules/.bin/babel-istanbul report cobertura --dir  ./../shippable/codecoverage/
    (works!) - NODE_ENV=production npm run build (works!)
    - cd ..
    - if [ $IS_PULL_REQUEST == false ]; then docker build -f Dockerfile.ecs -t $IMAGE:$BRANCH_NAME .; fi
    - if [ $IS_PULL_REQUEST == false ]; then docker tag $IMAGE:$BRANCH_NAME $IMAGE:latest; fi
    - if [ "$BRANCH" == "master" ] && [ $IS_PULL_REQUEST == false ]; then echo "versionName=$BRANCH_NAME" >> $JOB_STATE/homes-site-img-master.env; fi
    - if [ "$BRANCH" != "master" ]; then echo "versionName=$BRANCH_NAME" >> $JOB_STATE/homes-site-img-branch.env; fi
  push:
    - if [ $IS_PULL_REQUEST == false ]; then docker push $IMAGE:$BRANCH_NAME; fi
    - if [ $IS_PULL_REQUEST == false ]; then docker push $IMAGE:latest; fi
    - if [ $IS_PULL_REQUEST == false ]; then docker rmi $IMAGE:$BRANCH_NAME; fi # Clear all docker images after completion
    - if [ $IS_PULL_REQUEST == false ]; then docker rmi $IMAGE:latest; fi # Clear all docker images after completion

branches:
  only:
    - master

#Integration and Notifications
integrations:
  hub:
    - integrationName: ECR-digital-services-AWS
      type: ecr
      region: ap-southeast-2

  notifications:
    - integrationName: slack-bauerxcelmedia
      type: slack
      recipients:
        - "au-shippable"
      branches:
        only:
          - master
          - feature/*
          - fix/*
      on_success: always
      on_failure: always

#######################################

# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
# NodeJS App + Docker + ECR + ECS
# Version 2.1 with AWS ECR and ECS - Homes-Site

version: 2.1

# ORBS

orbs:
  aws-ecr: circleci/aws-ecr@6.15.3
  aws-ecs: circleci/aws-ecs@2.0.0

# JOBS

jobs:
  ecr-buildandpush-dockerimage:
    machine:
      image: ubuntu-1604:202010-01

# Prepare the VM for Docker BUILD + NodeJS App

    working_directory: ~/homes-site
    steps:
      - checkout
      - run: |
          echo "UBUNTU | NVM | NPM | NODE_JS"

          echo "### Switching to src dir (/home/circleci/homes-site/src) ###"
          cd src; pwd;

          echo "### Install NVM (Node Version Manager) # Installer for NodeJS + NPM ###"
          curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
          source ~/.profile

          echo "### Install NVM v10.19.0 ###"
          nvm install v10.19.0

          echo "### Setting Default NVM v10.19.0 ###"
          nvm use v10.19.0;

          echo "### Print Version Information ###"
          echo "Node Version : $(node --version)"
          echo "NPM Version  : $(npm --version)"

          echo "### Setting NPM Registry as BXM ###"
          npm set @bxm:registry http://npm.digital.bauer-media.net.au

          echo "### NPM > Install src/package.json > Node_Rebuild > Node_Test ###"
          npm install
          npm rebuild node-sass --force
          npm run test:ci
          NODE_ENV=production npm run build

# AWS ECR Integration: Build and Push NODE JS APP as Docker Image to ECR

      - aws-ecr/build-and-push-image:
          aws-access-key-id: ECR_AWS_ACCESS_KEY_ID
          aws-secret-access-key: ECR_AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
          profile-name: profile1
          account-url: AWS_ECR_ACCOUNT_URL
          repo: cci-repos2
          create-repo: true
          dockerfile: Dockerfile
          no-output-timeout: 20m
          skip-when-tags-exist: false
          tag: 'latest,homes-site-Port3001'

# WORKFLOWS

workflows:
  version: 2 # Version change from 2.1 > 2.0 (Required by circle_CI for workflow formatting)
  homes-site-build:
    jobs:
      - ecr-buildandpush-dockerimage

# AWS ECS Integration: [ Cluster | Service | Task | PullImage-ECR ]

      - aws-ecs/deploy-service-update:
          cluster-name: arn:aws:ecs:ap-southeast-2:014901580825:cluster/cci-app-ecs
          service-name: cci-service1
          family: cci-task3
          container-image-name-updates: "container=cci-container2,tag=latest"
          verify-revision-is-deployed: true
          force-new-deployment: true
          verification-timeout: 3m
          max-poll-attempts: 10
          poll-interval: 10
          requires:
            - ecr-buildandpush-dockerimage

### END ###

      #- ecs-nodejs-deploydockerimage
      #    requires:
      #      - ecr-buildandpush-dockerimage
      #- preparingVM-for-NodeJS
      #- ecr-buildandpush-dockerimage:
      #    requires:
      #      - preparingVM-for-NodeJS

      # ECS Integration: [ Cluster | Service | Task | PullImage-ECR ]
      # Roll out the Deployment [ in the form of New Task Revision ]
      # no of times to check the new task deployment
      # in minutes # in secs

      # This is required for the Orbs + Jobs to use -requires- keyword on the workflow.

      # Version: 2 / Version:2.1(first few-line on file).

### End ###


### End ###
